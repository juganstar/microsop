name: CI (Docker Compose)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Create a minimal .env.dev from safe inline vars + GitHub Secrets
      - name: Create .env.dev
        run: |
          cat > .env.dev << 'EOF'
          DEBUG=1
          SECRET_KEY=ci-secret
          DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 0.0.0.0 [::1] web
          DATABASE_URL=postgres://micro_admin:micro_pass@db:5432/micro_sop
          PYTHONPATH=/app/backend
          EOF
          # Inject Secrets from GitHub
          if [ -n "${OPENAI_API_KEY}" ]; then echo "OPENAI_API_KEY=${OPENAI_API_KEY}" >> .env.dev; fi
          if [ -n "${GOOGLE_CLIENT_ID}" ]; then echo "SOCIAL_AUTH_GOOGLE_OAUTH2_KEY=${GOOGLE_CLIENT_ID}" >> .env.dev; fi
          if [ -n "${GOOGLE_CLIENT_SECRET}" ]; then echo "SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET=${GOOGLE_CLIENT_SECRET}" >> .env.dev; fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GOOGLE_OAUTH2_KEY }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build images (uses Dockerfile.dev)
        run: docker compose -f docker-compose.dev.yml build

      - name: Start stack
        run: docker compose -f docker-compose.dev.yml up -d

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            if docker compose -f docker-compose.dev.yml exec -T db pg_isready -U micro_admin -d micro_sop >/dev/null 2>&1; then
              echo "DB ready"; break
            fi
            echo "Waiting for DB... ($i)"; sleep 2
          done

      - name: Install dev tools in web container
        run: |
          docker compose -f docker-compose.dev.yml exec -T web python -m pip install \
            pytest pytest-django coverage ruff black isort mypy

      - name: Django system checks & migrate
        run: |
          docker compose -f docker-compose.dev.yml exec -T web python manage.py check
          docker compose -f docker-compose.dev.yml exec -T web python manage.py migrate --noinput

      - name: Lint (ruff)
        run: |
          docker compose -f docker-compose.dev.yml exec -T web ruff check . --fix

      - name: Tests with coverage
        run: |
          docker compose -f docker-compose.dev.yml exec -T web coverage run -m pytest -q
          docker compose -f docker-compose.dev.yml exec -T web coverage report -m
          docker compose -f docker-compose.dev.yml exec -T web coverage html

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.dev.yml down -v
